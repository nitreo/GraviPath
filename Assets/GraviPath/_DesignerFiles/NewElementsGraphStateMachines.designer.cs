// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class ShipStateMachineBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _Crash;
    
    private StateMachineTrigger _Reset;
    
    private Alive _Alive;
    
    private Crashed _Crashed;
    
    public ShipStateMachineBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger Crash {
        get {
            if ((this._Crash == null)) {
                this._Crash = new StateMachineTrigger(this, "Crash");
            }
            return this._Crash;
        }
    }
    
    public virtual StateMachineTrigger Reset {
        get {
            if ((this._Reset == null)) {
                this._Reset = new StateMachineTrigger(this, "Reset");
            }
            return this._Reset;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Alive;
        }
    }
    
    public virtual Alive Alive {
        get {
            if ((this._Alive == null)) {
                this._Alive = new Alive();
            }
            return this._Alive;
        }
    }
    
    public virtual Crashed Crashed {
        get {
            if ((this._Crashed == null)) {
                this._Crashed = new Crashed();
            }
            return this._Crashed;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Alive.StateMachine = this;
        Alive.Crash = new StateTransition("Crash", Alive,Crashed);
        Alive.AddTrigger(Crash, Alive.Crash);
        states.Add(Alive);
        this.Crashed.StateMachine = this;
        Crashed.Reset = new StateTransition("Reset", Crashed,Alive);
        Crashed.AddTrigger(Reset, Crashed.Reset);
        states.Add(Crashed);
    }
}

public class Alive : Invert.StateMachine.State {
    
    private StateTransition _Crash;
    
    public virtual StateTransition Crash {
        get {
            return this._Crash;
        }
        set {
            _Crash = value;
        }
    }
    
    public override string Name {
        get {
            return "Alive";
        }
    }
    
    private void CrashTransition() {
        this.Transition(this.Crash);
    }
}

public class Crashed : Invert.StateMachine.State {
    
    private StateTransition _Reset;
    
    public virtual StateTransition Reset {
        get {
            return this._Reset;
        }
        set {
            _Reset = value;
        }
    }
    
    public override string Name {
        get {
            return "Crashed";
        }
    }
    
    private void ResetTransition() {
        this.Transition(this.Reset);
    }
}
