// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class LevelSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class LevelSceneManagerBase : SceneManager {
    
    public MenuSceneManagerSettings _ToMenuTransition = new MenuSceneManagerSettings();
    
    private LevelRootViewModel _LevelRoot;
    
    private UniverseRepositoryViewModel _UniverseRepository;
    
    private LevelRootController _LevelRootController;
    
    private PlayerController _PlayerController;
    
    private TryEntryController _TryEntryController;
    
    private UniverseController _UniverseController;
    
    private UniverseObjectController _UniverseObjectController;
    
    private ZoneController _ZoneController;
    
    private GravityObjectController _GravityObjectController;
    
    private PlanetController _PlanetController;
    
    private AsteroidController _AsteroidController;
    
    private BlackholeController _BlackholeController;
    
    private MiniObjectController _MiniObjectController;
    
    private SimplePlanet1Controller _SimplePlanet1Controller;
    
    private SimplePlanet2Controller _SimplePlanet2Controller;
    
    private SimpleAsteroid1Controller _SimpleAsteroid1Controller;
    
    private SimpleAsteroid2Controller _SimpleAsteroid2Controller;
    
    private SimpleAsteroid3Controller _SimpleAsteroid3Controller;
    
    private SimpleAsteroid4Controller _SimpleAsteroid4Controller;
    
    private SimpleBlackhole1Controller _SimpleBlackhole1Controller;
    
    private SpaceGarbageAreaController _SpaceGarbageAreaController;
    
    private UniverseRepositoryController _UniverseRepositoryController;
    
    private StartZoneController _StartZoneController;
    
    public LevelSceneManagerSettings _LevelSceneManagerSettings = new LevelSceneManagerSettings();
    
    [Inject("LevelRoot")]
    public virtual LevelRootViewModel LevelRoot {
        get {
            if ((this._LevelRoot == null)) {
                this._LevelRoot = CreateInstanceViewModel<LevelRootViewModel>(LevelRootController, "LevelRoot");
            }
            return this._LevelRoot;
        }
        set {
            _LevelRoot = value;
        }
    }
    
    [Inject("UniverseRepository")]
    public virtual UniverseRepositoryViewModel UniverseRepository {
        get {
            if ((this._UniverseRepository == null)) {
                this._UniverseRepository = CreateInstanceViewModel<UniverseRepositoryViewModel>(UniverseRepositoryController, "UniverseRepository");
            }
            return this._UniverseRepository;
        }
        set {
            _UniverseRepository = value;
        }
    }
    
    [Inject()]
    public virtual LevelRootController LevelRootController {
        get {
            if ((this._LevelRootController == null)) {
                this._LevelRootController = new LevelRootController() { Container = Container };
            }
            return this._LevelRootController;
        }
        set {
            _LevelRootController = value;
        }
    }
    
    [Inject()]
    public virtual PlayerController PlayerController {
        get {
            if ((this._PlayerController == null)) {
                this._PlayerController = new PlayerController() { Container = Container };
            }
            return this._PlayerController;
        }
        set {
            _PlayerController = value;
        }
    }
    
    [Inject()]
    public virtual TryEntryController TryEntryController {
        get {
            if ((this._TryEntryController == null)) {
                this._TryEntryController = new TryEntryController() { Container = Container };
            }
            return this._TryEntryController;
        }
        set {
            _TryEntryController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseController UniverseController {
        get {
            if ((this._UniverseController == null)) {
                this._UniverseController = new UniverseController() { Container = Container };
            }
            return this._UniverseController;
        }
        set {
            _UniverseController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseObjectController UniverseObjectController {
        get {
            if ((this._UniverseObjectController == null)) {
                this._UniverseObjectController = new UniverseObjectController() { Container = Container };
            }
            return this._UniverseObjectController;
        }
        set {
            _UniverseObjectController = value;
        }
    }
    
    [Inject()]
    public virtual ZoneController ZoneController {
        get {
            if ((this._ZoneController == null)) {
                this._ZoneController = new ZoneController() { Container = Container };
            }
            return this._ZoneController;
        }
        set {
            _ZoneController = value;
        }
    }
    
    [Inject()]
    public virtual GravityObjectController GravityObjectController {
        get {
            if ((this._GravityObjectController == null)) {
                this._GravityObjectController = new GravityObjectController() { Container = Container };
            }
            return this._GravityObjectController;
        }
        set {
            _GravityObjectController = value;
        }
    }
    
    [Inject()]
    public virtual PlanetController PlanetController {
        get {
            if ((this._PlanetController == null)) {
                this._PlanetController = new PlanetController() { Container = Container };
            }
            return this._PlanetController;
        }
        set {
            _PlanetController = value;
        }
    }
    
    [Inject()]
    public virtual AsteroidController AsteroidController {
        get {
            if ((this._AsteroidController == null)) {
                this._AsteroidController = new AsteroidController() { Container = Container };
            }
            return this._AsteroidController;
        }
        set {
            _AsteroidController = value;
        }
    }
    
    [Inject()]
    public virtual BlackholeController BlackholeController {
        get {
            if ((this._BlackholeController == null)) {
                this._BlackholeController = new BlackholeController() { Container = Container };
            }
            return this._BlackholeController;
        }
        set {
            _BlackholeController = value;
        }
    }
    
    [Inject()]
    public virtual MiniObjectController MiniObjectController {
        get {
            if ((this._MiniObjectController == null)) {
                this._MiniObjectController = new MiniObjectController() { Container = Container };
            }
            return this._MiniObjectController;
        }
        set {
            _MiniObjectController = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet1Controller SimplePlanet1Controller {
        get {
            if ((this._SimplePlanet1Controller == null)) {
                this._SimplePlanet1Controller = new SimplePlanet1Controller() { Container = Container };
            }
            return this._SimplePlanet1Controller;
        }
        set {
            _SimplePlanet1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet2Controller SimplePlanet2Controller {
        get {
            if ((this._SimplePlanet2Controller == null)) {
                this._SimplePlanet2Controller = new SimplePlanet2Controller() { Container = Container };
            }
            return this._SimplePlanet2Controller;
        }
        set {
            _SimplePlanet2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid1Controller SimpleAsteroid1Controller {
        get {
            if ((this._SimpleAsteroid1Controller == null)) {
                this._SimpleAsteroid1Controller = new SimpleAsteroid1Controller() { Container = Container };
            }
            return this._SimpleAsteroid1Controller;
        }
        set {
            _SimpleAsteroid1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid2Controller SimpleAsteroid2Controller {
        get {
            if ((this._SimpleAsteroid2Controller == null)) {
                this._SimpleAsteroid2Controller = new SimpleAsteroid2Controller() { Container = Container };
            }
            return this._SimpleAsteroid2Controller;
        }
        set {
            _SimpleAsteroid2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid3Controller SimpleAsteroid3Controller {
        get {
            if ((this._SimpleAsteroid3Controller == null)) {
                this._SimpleAsteroid3Controller = new SimpleAsteroid3Controller() { Container = Container };
            }
            return this._SimpleAsteroid3Controller;
        }
        set {
            _SimpleAsteroid3Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid4Controller SimpleAsteroid4Controller {
        get {
            if ((this._SimpleAsteroid4Controller == null)) {
                this._SimpleAsteroid4Controller = new SimpleAsteroid4Controller() { Container = Container };
            }
            return this._SimpleAsteroid4Controller;
        }
        set {
            _SimpleAsteroid4Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleBlackhole1Controller SimpleBlackhole1Controller {
        get {
            if ((this._SimpleBlackhole1Controller == null)) {
                this._SimpleBlackhole1Controller = new SimpleBlackhole1Controller() { Container = Container };
            }
            return this._SimpleBlackhole1Controller;
        }
        set {
            _SimpleBlackhole1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SpaceGarbageAreaController SpaceGarbageAreaController {
        get {
            if ((this._SpaceGarbageAreaController == null)) {
                this._SpaceGarbageAreaController = new SpaceGarbageAreaController() { Container = Container };
            }
            return this._SpaceGarbageAreaController;
        }
        set {
            _SpaceGarbageAreaController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseRepositoryController UniverseRepositoryController {
        get {
            if ((this._UniverseRepositoryController == null)) {
                this._UniverseRepositoryController = new UniverseRepositoryController() { Container = Container };
            }
            return this._UniverseRepositoryController;
        }
        set {
            _UniverseRepositoryController = value;
        }
    }
    
    [Inject()]
    public virtual StartZoneController StartZoneController {
        get {
            if ((this._StartZoneController == null)) {
                this._StartZoneController = new StartZoneController() { Container = Container };
            }
            return this._StartZoneController;
        }
        set {
            _StartZoneController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<LevelRootViewModel>(LevelRoot,"LevelRoot");
        Container.RegisterViewModel<UniverseRepositoryViewModel>(UniverseRepository,"UniverseRepository");
        Container.RegisterController<LevelRootController>(LevelRootController);
        Container.RegisterController<PlayerController>(PlayerController);
        Container.RegisterController<TryEntryController>(TryEntryController);
        Container.RegisterController<UniverseController>(UniverseController);
        Container.RegisterController<UniverseObjectController>(UniverseObjectController);
        Container.RegisterController<ZoneController>(ZoneController);
        Container.RegisterController<GravityObjectController>(GravityObjectController);
        Container.RegisterController<PlanetController>(PlanetController);
        Container.RegisterController<AsteroidController>(AsteroidController);
        Container.RegisterController<BlackholeController>(BlackholeController);
        Container.RegisterController<MiniObjectController>(MiniObjectController);
        Container.RegisterController<SimplePlanet1Controller>(SimplePlanet1Controller);
        Container.RegisterController<SimplePlanet2Controller>(SimplePlanet2Controller);
        Container.RegisterController<SimpleAsteroid1Controller>(SimpleAsteroid1Controller);
        Container.RegisterController<SimpleAsteroid2Controller>(SimpleAsteroid2Controller);
        Container.RegisterController<SimpleAsteroid3Controller>(SimpleAsteroid3Controller);
        Container.RegisterController<SimpleAsteroid4Controller>(SimpleAsteroid4Controller);
        Container.RegisterController<SimpleBlackhole1Controller>(SimpleBlackhole1Controller);
        Container.RegisterController<SpaceGarbageAreaController>(SpaceGarbageAreaController);
        Container.RegisterController<UniverseRepositoryController>(UniverseRepositoryController);
        Container.RegisterController<StartZoneController>(StartZoneController);
        this.Container.InjectAll();
        LevelRootController.Initialize(LevelRoot);
        UniverseRepositoryController.Initialize(UniverseRepository);
    }
    
    public virtual void ToMenuTransitionComplete(MenuSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetToMenuScenes() {
        return this._ToMenuTransition._Scenes;
    }
    
    public virtual void ToMenu() {
        GameManager.TransitionLevel<MenuSceneManager>((container) =>{container._MenuSceneManagerSettings = _ToMenuTransition; ToMenuTransitionComplete(container); }, this.GetToMenuScenes().ToArray());
    }
    
    public override void Initialize() {
        base.Initialize();
        LevelRoot.ToMenu.Subscribe(_=> ToMenu()).DisposeWith(this.gameObject);
    }
}

[System.SerializableAttribute()]
public sealed partial class MenuSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class MenuSceneManagerBase : SceneManager {
    
    public LevelSceneManagerSettings _StartLevelTransition = new LevelSceneManagerSettings();
    
    public EditorSceneManagerSettings _StartEditorTransition = new EditorSceneManagerSettings();
    
    private MenuRootViewModel _MenuRoot;
    
    private UniverseRepositoryViewModel _UniverseRepository;
    
    private MenuRootController _MenuRootController;
    
    private UniverseController _UniverseController;
    
    private UniverseObjectController _UniverseObjectController;
    
    private ZoneController _ZoneController;
    
    private GravityObjectController _GravityObjectController;
    
    private PlanetController _PlanetController;
    
    private AsteroidController _AsteroidController;
    
    private BlackholeController _BlackholeController;
    
    private MiniObjectController _MiniObjectController;
    
    private SimplePlanet1Controller _SimplePlanet1Controller;
    
    private SimplePlanet2Controller _SimplePlanet2Controller;
    
    private SimpleAsteroid1Controller _SimpleAsteroid1Controller;
    
    private SimpleAsteroid2Controller _SimpleAsteroid2Controller;
    
    private SimpleAsteroid3Controller _SimpleAsteroid3Controller;
    
    private SimpleAsteroid4Controller _SimpleAsteroid4Controller;
    
    private SimpleBlackhole1Controller _SimpleBlackhole1Controller;
    
    private SpaceGarbageAreaController _SpaceGarbageAreaController;
    
    private UniverseRepositoryController _UniverseRepositoryController;
    
    private StartZoneController _StartZoneController;
    
    public MenuSceneManagerSettings _MenuSceneManagerSettings = new MenuSceneManagerSettings();
    
    [Inject("MenuRoot")]
    public virtual MenuRootViewModel MenuRoot {
        get {
            if ((this._MenuRoot == null)) {
                this._MenuRoot = CreateInstanceViewModel<MenuRootViewModel>(MenuRootController, "MenuRoot");
            }
            return this._MenuRoot;
        }
        set {
            _MenuRoot = value;
        }
    }
    
    [Inject("UniverseRepository")]
    public virtual UniverseRepositoryViewModel UniverseRepository {
        get {
            if ((this._UniverseRepository == null)) {
                this._UniverseRepository = CreateInstanceViewModel<UniverseRepositoryViewModel>(UniverseRepositoryController, "UniverseRepository");
            }
            return this._UniverseRepository;
        }
        set {
            _UniverseRepository = value;
        }
    }
    
    [Inject()]
    public virtual MenuRootController MenuRootController {
        get {
            if ((this._MenuRootController == null)) {
                this._MenuRootController = new MenuRootController() { Container = Container };
            }
            return this._MenuRootController;
        }
        set {
            _MenuRootController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseController UniverseController {
        get {
            if ((this._UniverseController == null)) {
                this._UniverseController = new UniverseController() { Container = Container };
            }
            return this._UniverseController;
        }
        set {
            _UniverseController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseObjectController UniverseObjectController {
        get {
            if ((this._UniverseObjectController == null)) {
                this._UniverseObjectController = new UniverseObjectController() { Container = Container };
            }
            return this._UniverseObjectController;
        }
        set {
            _UniverseObjectController = value;
        }
    }
    
    [Inject()]
    public virtual ZoneController ZoneController {
        get {
            if ((this._ZoneController == null)) {
                this._ZoneController = new ZoneController() { Container = Container };
            }
            return this._ZoneController;
        }
        set {
            _ZoneController = value;
        }
    }
    
    [Inject()]
    public virtual GravityObjectController GravityObjectController {
        get {
            if ((this._GravityObjectController == null)) {
                this._GravityObjectController = new GravityObjectController() { Container = Container };
            }
            return this._GravityObjectController;
        }
        set {
            _GravityObjectController = value;
        }
    }
    
    [Inject()]
    public virtual PlanetController PlanetController {
        get {
            if ((this._PlanetController == null)) {
                this._PlanetController = new PlanetController() { Container = Container };
            }
            return this._PlanetController;
        }
        set {
            _PlanetController = value;
        }
    }
    
    [Inject()]
    public virtual AsteroidController AsteroidController {
        get {
            if ((this._AsteroidController == null)) {
                this._AsteroidController = new AsteroidController() { Container = Container };
            }
            return this._AsteroidController;
        }
        set {
            _AsteroidController = value;
        }
    }
    
    [Inject()]
    public virtual BlackholeController BlackholeController {
        get {
            if ((this._BlackholeController == null)) {
                this._BlackholeController = new BlackholeController() { Container = Container };
            }
            return this._BlackholeController;
        }
        set {
            _BlackholeController = value;
        }
    }
    
    [Inject()]
    public virtual MiniObjectController MiniObjectController {
        get {
            if ((this._MiniObjectController == null)) {
                this._MiniObjectController = new MiniObjectController() { Container = Container };
            }
            return this._MiniObjectController;
        }
        set {
            _MiniObjectController = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet1Controller SimplePlanet1Controller {
        get {
            if ((this._SimplePlanet1Controller == null)) {
                this._SimplePlanet1Controller = new SimplePlanet1Controller() { Container = Container };
            }
            return this._SimplePlanet1Controller;
        }
        set {
            _SimplePlanet1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet2Controller SimplePlanet2Controller {
        get {
            if ((this._SimplePlanet2Controller == null)) {
                this._SimplePlanet2Controller = new SimplePlanet2Controller() { Container = Container };
            }
            return this._SimplePlanet2Controller;
        }
        set {
            _SimplePlanet2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid1Controller SimpleAsteroid1Controller {
        get {
            if ((this._SimpleAsteroid1Controller == null)) {
                this._SimpleAsteroid1Controller = new SimpleAsteroid1Controller() { Container = Container };
            }
            return this._SimpleAsteroid1Controller;
        }
        set {
            _SimpleAsteroid1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid2Controller SimpleAsteroid2Controller {
        get {
            if ((this._SimpleAsteroid2Controller == null)) {
                this._SimpleAsteroid2Controller = new SimpleAsteroid2Controller() { Container = Container };
            }
            return this._SimpleAsteroid2Controller;
        }
        set {
            _SimpleAsteroid2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid3Controller SimpleAsteroid3Controller {
        get {
            if ((this._SimpleAsteroid3Controller == null)) {
                this._SimpleAsteroid3Controller = new SimpleAsteroid3Controller() { Container = Container };
            }
            return this._SimpleAsteroid3Controller;
        }
        set {
            _SimpleAsteroid3Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid4Controller SimpleAsteroid4Controller {
        get {
            if ((this._SimpleAsteroid4Controller == null)) {
                this._SimpleAsteroid4Controller = new SimpleAsteroid4Controller() { Container = Container };
            }
            return this._SimpleAsteroid4Controller;
        }
        set {
            _SimpleAsteroid4Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleBlackhole1Controller SimpleBlackhole1Controller {
        get {
            if ((this._SimpleBlackhole1Controller == null)) {
                this._SimpleBlackhole1Controller = new SimpleBlackhole1Controller() { Container = Container };
            }
            return this._SimpleBlackhole1Controller;
        }
        set {
            _SimpleBlackhole1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SpaceGarbageAreaController SpaceGarbageAreaController {
        get {
            if ((this._SpaceGarbageAreaController == null)) {
                this._SpaceGarbageAreaController = new SpaceGarbageAreaController() { Container = Container };
            }
            return this._SpaceGarbageAreaController;
        }
        set {
            _SpaceGarbageAreaController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseRepositoryController UniverseRepositoryController {
        get {
            if ((this._UniverseRepositoryController == null)) {
                this._UniverseRepositoryController = new UniverseRepositoryController() { Container = Container };
            }
            return this._UniverseRepositoryController;
        }
        set {
            _UniverseRepositoryController = value;
        }
    }
    
    [Inject()]
    public virtual StartZoneController StartZoneController {
        get {
            if ((this._StartZoneController == null)) {
                this._StartZoneController = new StartZoneController() { Container = Container };
            }
            return this._StartZoneController;
        }
        set {
            _StartZoneController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<MenuRootViewModel>(MenuRoot,"MenuRoot");
        Container.RegisterViewModel<UniverseRepositoryViewModel>(UniverseRepository,"UniverseRepository");
        Container.RegisterController<MenuRootController>(MenuRootController);
        Container.RegisterController<UniverseController>(UniverseController);
        Container.RegisterController<UniverseObjectController>(UniverseObjectController);
        Container.RegisterController<ZoneController>(ZoneController);
        Container.RegisterController<GravityObjectController>(GravityObjectController);
        Container.RegisterController<PlanetController>(PlanetController);
        Container.RegisterController<AsteroidController>(AsteroidController);
        Container.RegisterController<BlackholeController>(BlackholeController);
        Container.RegisterController<MiniObjectController>(MiniObjectController);
        Container.RegisterController<SimplePlanet1Controller>(SimplePlanet1Controller);
        Container.RegisterController<SimplePlanet2Controller>(SimplePlanet2Controller);
        Container.RegisterController<SimpleAsteroid1Controller>(SimpleAsteroid1Controller);
        Container.RegisterController<SimpleAsteroid2Controller>(SimpleAsteroid2Controller);
        Container.RegisterController<SimpleAsteroid3Controller>(SimpleAsteroid3Controller);
        Container.RegisterController<SimpleAsteroid4Controller>(SimpleAsteroid4Controller);
        Container.RegisterController<SimpleBlackhole1Controller>(SimpleBlackhole1Controller);
        Container.RegisterController<SpaceGarbageAreaController>(SpaceGarbageAreaController);
        Container.RegisterController<UniverseRepositoryController>(UniverseRepositoryController);
        Container.RegisterController<StartZoneController>(StartZoneController);
        this.Container.InjectAll();
        MenuRootController.Initialize(MenuRoot);
        UniverseRepositoryController.Initialize(UniverseRepository);
    }
    
    public virtual void StartLevelTransitionComplete(LevelSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetStartLevelScenes(StartLevelDescriptor arg) {
        return this._StartLevelTransition._Scenes;
    }
    
    public virtual void StartLevel(StartLevelDescriptor arg) {
        GameManager.TransitionLevel<LevelSceneManager>((container) =>{container._LevelSceneManagerSettings = _StartLevelTransition; StartLevelTransitionComplete(container); }, this.GetStartLevelScenes(arg).ToArray());
    }
    
    public virtual void StartEditorTransitionComplete(EditorSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetStartEditorScenes() {
        return this._StartEditorTransition._Scenes;
    }
    
    public virtual void StartEditor() {
        GameManager.TransitionLevel<EditorSceneManager>((container) =>{container._EditorSceneManagerSettings = _StartEditorTransition; StartEditorTransitionComplete(container); }, this.GetStartEditorScenes().ToArray());
    }
    
    public override void Initialize() {
        base.Initialize();
        MenuRoot.StartLevel.Subscribe(_=> StartLevel((StartLevelDescriptor)MenuRoot.StartLevel.Parameter)).DisposeWith(this.gameObject);
        MenuRoot.StartEditor.Subscribe(_=> StartEditor()).DisposeWith(this.gameObject);
    }
}

[System.SerializableAttribute()]
public sealed partial class EditorSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class EditorSceneManagerBase : SceneManager {
    
    public MenuSceneManagerSettings _ToMenuTransition = new MenuSceneManagerSettings();
    
    private EditorRootViewModel _EditorRoot;
    
    private UniverseRepositoryViewModel _UniverseRepository;
    
    private EditorRootController _EditorRootController;
    
    private UniverseController _UniverseController;
    
    private NewUniverseSubEditorController _NewUniverseSubEditorController;
    
    private AddUniverseObjectSubEditorController _AddUniverseObjectSubEditorController;
    
    private UniverseObjectController _UniverseObjectController;
    
    private ZoneController _ZoneController;
    
    private GravityObjectController _GravityObjectController;
    
    private PlanetController _PlanetController;
    
    private AsteroidController _AsteroidController;
    
    private BlackholeController _BlackholeController;
    
    private MiniObjectController _MiniObjectController;
    
    private SimplePlanet1Controller _SimplePlanet1Controller;
    
    private SimplePlanet2Controller _SimplePlanet2Controller;
    
    private SimpleAsteroid1Controller _SimpleAsteroid1Controller;
    
    private SimpleAsteroid2Controller _SimpleAsteroid2Controller;
    
    private SimpleAsteroid3Controller _SimpleAsteroid3Controller;
    
    private SimpleAsteroid4Controller _SimpleAsteroid4Controller;
    
    private SimpleBlackhole1Controller _SimpleBlackhole1Controller;
    
    private SpaceGarbageAreaController _SpaceGarbageAreaController;
    
    private UniverseRepositoryController _UniverseRepositoryController;
    
    private StartZoneController _StartZoneController;
    
    public EditorSceneManagerSettings _EditorSceneManagerSettings = new EditorSceneManagerSettings();
    
    [Inject("EditorRoot")]
    public virtual EditorRootViewModel EditorRoot {
        get {
            if ((this._EditorRoot == null)) {
                this._EditorRoot = CreateInstanceViewModel<EditorRootViewModel>(EditorRootController, "EditorRoot");
            }
            return this._EditorRoot;
        }
        set {
            _EditorRoot = value;
        }
    }
    
    [Inject("UniverseRepository")]
    public virtual UniverseRepositoryViewModel UniverseRepository {
        get {
            if ((this._UniverseRepository == null)) {
                this._UniverseRepository = CreateInstanceViewModel<UniverseRepositoryViewModel>(UniverseRepositoryController, "UniverseRepository");
            }
            return this._UniverseRepository;
        }
        set {
            _UniverseRepository = value;
        }
    }
    
    [Inject()]
    public virtual EditorRootController EditorRootController {
        get {
            if ((this._EditorRootController == null)) {
                this._EditorRootController = new EditorRootController() { Container = Container };
            }
            return this._EditorRootController;
        }
        set {
            _EditorRootController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseController UniverseController {
        get {
            if ((this._UniverseController == null)) {
                this._UniverseController = new UniverseController() { Container = Container };
            }
            return this._UniverseController;
        }
        set {
            _UniverseController = value;
        }
    }
    
    [Inject()]
    public virtual NewUniverseSubEditorController NewUniverseSubEditorController {
        get {
            if ((this._NewUniverseSubEditorController == null)) {
                this._NewUniverseSubEditorController = new NewUniverseSubEditorController() { Container = Container };
            }
            return this._NewUniverseSubEditorController;
        }
        set {
            _NewUniverseSubEditorController = value;
        }
    }
    
    [Inject()]
    public virtual AddUniverseObjectSubEditorController AddUniverseObjectSubEditorController {
        get {
            if ((this._AddUniverseObjectSubEditorController == null)) {
                this._AddUniverseObjectSubEditorController = new AddUniverseObjectSubEditorController() { Container = Container };
            }
            return this._AddUniverseObjectSubEditorController;
        }
        set {
            _AddUniverseObjectSubEditorController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseObjectController UniverseObjectController {
        get {
            if ((this._UniverseObjectController == null)) {
                this._UniverseObjectController = new UniverseObjectController() { Container = Container };
            }
            return this._UniverseObjectController;
        }
        set {
            _UniverseObjectController = value;
        }
    }
    
    [Inject()]
    public virtual ZoneController ZoneController {
        get {
            if ((this._ZoneController == null)) {
                this._ZoneController = new ZoneController() { Container = Container };
            }
            return this._ZoneController;
        }
        set {
            _ZoneController = value;
        }
    }
    
    [Inject()]
    public virtual GravityObjectController GravityObjectController {
        get {
            if ((this._GravityObjectController == null)) {
                this._GravityObjectController = new GravityObjectController() { Container = Container };
            }
            return this._GravityObjectController;
        }
        set {
            _GravityObjectController = value;
        }
    }
    
    [Inject()]
    public virtual PlanetController PlanetController {
        get {
            if ((this._PlanetController == null)) {
                this._PlanetController = new PlanetController() { Container = Container };
            }
            return this._PlanetController;
        }
        set {
            _PlanetController = value;
        }
    }
    
    [Inject()]
    public virtual AsteroidController AsteroidController {
        get {
            if ((this._AsteroidController == null)) {
                this._AsteroidController = new AsteroidController() { Container = Container };
            }
            return this._AsteroidController;
        }
        set {
            _AsteroidController = value;
        }
    }
    
    [Inject()]
    public virtual BlackholeController BlackholeController {
        get {
            if ((this._BlackholeController == null)) {
                this._BlackholeController = new BlackholeController() { Container = Container };
            }
            return this._BlackholeController;
        }
        set {
            _BlackholeController = value;
        }
    }
    
    [Inject()]
    public virtual MiniObjectController MiniObjectController {
        get {
            if ((this._MiniObjectController == null)) {
                this._MiniObjectController = new MiniObjectController() { Container = Container };
            }
            return this._MiniObjectController;
        }
        set {
            _MiniObjectController = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet1Controller SimplePlanet1Controller {
        get {
            if ((this._SimplePlanet1Controller == null)) {
                this._SimplePlanet1Controller = new SimplePlanet1Controller() { Container = Container };
            }
            return this._SimplePlanet1Controller;
        }
        set {
            _SimplePlanet1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimplePlanet2Controller SimplePlanet2Controller {
        get {
            if ((this._SimplePlanet2Controller == null)) {
                this._SimplePlanet2Controller = new SimplePlanet2Controller() { Container = Container };
            }
            return this._SimplePlanet2Controller;
        }
        set {
            _SimplePlanet2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid1Controller SimpleAsteroid1Controller {
        get {
            if ((this._SimpleAsteroid1Controller == null)) {
                this._SimpleAsteroid1Controller = new SimpleAsteroid1Controller() { Container = Container };
            }
            return this._SimpleAsteroid1Controller;
        }
        set {
            _SimpleAsteroid1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid2Controller SimpleAsteroid2Controller {
        get {
            if ((this._SimpleAsteroid2Controller == null)) {
                this._SimpleAsteroid2Controller = new SimpleAsteroid2Controller() { Container = Container };
            }
            return this._SimpleAsteroid2Controller;
        }
        set {
            _SimpleAsteroid2Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid3Controller SimpleAsteroid3Controller {
        get {
            if ((this._SimpleAsteroid3Controller == null)) {
                this._SimpleAsteroid3Controller = new SimpleAsteroid3Controller() { Container = Container };
            }
            return this._SimpleAsteroid3Controller;
        }
        set {
            _SimpleAsteroid3Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleAsteroid4Controller SimpleAsteroid4Controller {
        get {
            if ((this._SimpleAsteroid4Controller == null)) {
                this._SimpleAsteroid4Controller = new SimpleAsteroid4Controller() { Container = Container };
            }
            return this._SimpleAsteroid4Controller;
        }
        set {
            _SimpleAsteroid4Controller = value;
        }
    }
    
    [Inject()]
    public virtual SimpleBlackhole1Controller SimpleBlackhole1Controller {
        get {
            if ((this._SimpleBlackhole1Controller == null)) {
                this._SimpleBlackhole1Controller = new SimpleBlackhole1Controller() { Container = Container };
            }
            return this._SimpleBlackhole1Controller;
        }
        set {
            _SimpleBlackhole1Controller = value;
        }
    }
    
    [Inject()]
    public virtual SpaceGarbageAreaController SpaceGarbageAreaController {
        get {
            if ((this._SpaceGarbageAreaController == null)) {
                this._SpaceGarbageAreaController = new SpaceGarbageAreaController() { Container = Container };
            }
            return this._SpaceGarbageAreaController;
        }
        set {
            _SpaceGarbageAreaController = value;
        }
    }
    
    [Inject()]
    public virtual UniverseRepositoryController UniverseRepositoryController {
        get {
            if ((this._UniverseRepositoryController == null)) {
                this._UniverseRepositoryController = new UniverseRepositoryController() { Container = Container };
            }
            return this._UniverseRepositoryController;
        }
        set {
            _UniverseRepositoryController = value;
        }
    }
    
    [Inject()]
    public virtual StartZoneController StartZoneController {
        get {
            if ((this._StartZoneController == null)) {
                this._StartZoneController = new StartZoneController() { Container = Container };
            }
            return this._StartZoneController;
        }
        set {
            _StartZoneController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<EditorRootViewModel>(EditorRoot,"EditorRoot");
        Container.RegisterViewModel<UniverseRepositoryViewModel>(UniverseRepository,"UniverseRepository");
        Container.RegisterController<EditorRootController>(EditorRootController);
        Container.RegisterController<UniverseController>(UniverseController);
        Container.RegisterController<NewUniverseSubEditorController>(NewUniverseSubEditorController);
        Container.RegisterController<AddUniverseObjectSubEditorController>(AddUniverseObjectSubEditorController);
        Container.RegisterController<UniverseObjectController>(UniverseObjectController);
        Container.RegisterController<ZoneController>(ZoneController);
        Container.RegisterController<GravityObjectController>(GravityObjectController);
        Container.RegisterController<PlanetController>(PlanetController);
        Container.RegisterController<AsteroidController>(AsteroidController);
        Container.RegisterController<BlackholeController>(BlackholeController);
        Container.RegisterController<MiniObjectController>(MiniObjectController);
        Container.RegisterController<SimplePlanet1Controller>(SimplePlanet1Controller);
        Container.RegisterController<SimplePlanet2Controller>(SimplePlanet2Controller);
        Container.RegisterController<SimpleAsteroid1Controller>(SimpleAsteroid1Controller);
        Container.RegisterController<SimpleAsteroid2Controller>(SimpleAsteroid2Controller);
        Container.RegisterController<SimpleAsteroid3Controller>(SimpleAsteroid3Controller);
        Container.RegisterController<SimpleAsteroid4Controller>(SimpleAsteroid4Controller);
        Container.RegisterController<SimpleBlackhole1Controller>(SimpleBlackhole1Controller);
        Container.RegisterController<SpaceGarbageAreaController>(SpaceGarbageAreaController);
        Container.RegisterController<UniverseRepositoryController>(UniverseRepositoryController);
        Container.RegisterController<StartZoneController>(StartZoneController);
        this.Container.InjectAll();
        EditorRootController.Initialize(EditorRoot);
        UniverseRepositoryController.Initialize(UniverseRepository);
    }
    
    public virtual void ToMenuTransitionComplete(MenuSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetToMenuScenes() {
        return this._ToMenuTransition._Scenes;
    }
    
    public virtual void ToMenu() {
        GameManager.TransitionLevel<MenuSceneManager>((container) =>{container._MenuSceneManagerSettings = _ToMenuTransition; ToMenuTransitionComplete(container); }, this.GetToMenuScenes().ToArray());
    }
    
    public override void Initialize() {
        base.Initialize();
        EditorRoot.ToMenu.Subscribe(_=> ToMenu()).DisposeWith(this.gameObject);
    }
}
