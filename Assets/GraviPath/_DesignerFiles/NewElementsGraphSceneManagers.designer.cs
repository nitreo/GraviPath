// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class LevelSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class LevelSceneManagerBase : SceneManager {
    
    public MenuSceneManagerSettings _ToMenuTransition = new MenuSceneManagerSettings();
    
    private LevelRootViewModel _LevelRoot;
    
    private LevelRootController _LevelRootController;
    
    private PlayerController _PlayerController;
    
    private TryEntryController _TryEntryController;
    
    public LevelSceneManagerSettings _LevelSceneManagerSettings = new LevelSceneManagerSettings();
    
    [Inject("LevelRoot")]
    public virtual LevelRootViewModel LevelRoot {
        get {
            if ((this._LevelRoot == null)) {
                this._LevelRoot = CreateInstanceViewModel<LevelRootViewModel>(LevelRootController, "LevelRoot");
            }
            return this._LevelRoot;
        }
        set {
            _LevelRoot = value;
        }
    }
    
    [Inject()]
    public virtual LevelRootController LevelRootController {
        get {
            if ((this._LevelRootController == null)) {
                this._LevelRootController = new LevelRootController() { Container = Container };
            }
            return this._LevelRootController;
        }
        set {
            _LevelRootController = value;
        }
    }
    
    [Inject()]
    public virtual PlayerController PlayerController {
        get {
            if ((this._PlayerController == null)) {
                this._PlayerController = new PlayerController() { Container = Container };
            }
            return this._PlayerController;
        }
        set {
            _PlayerController = value;
        }
    }
    
    [Inject()]
    public virtual TryEntryController TryEntryController {
        get {
            if ((this._TryEntryController == null)) {
                this._TryEntryController = new TryEntryController() { Container = Container };
            }
            return this._TryEntryController;
        }
        set {
            _TryEntryController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<LevelRootViewModel>(LevelRoot,"LevelRoot");
        Container.RegisterController<LevelRootController>(LevelRootController);
        Container.RegisterController<PlayerController>(PlayerController);
        Container.RegisterController<TryEntryController>(TryEntryController);
        this.Container.InjectAll();
        LevelRootController.Initialize(LevelRoot);
    }
    
    public virtual void ToMenuTransitionComplete(MenuSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetToMenuScenes() {
        return this._ToMenuTransition._Scenes;
    }
    
    public virtual void ToMenu() {
        GameManager.TransitionLevel<MenuSceneManager>((container) =>{container._MenuSceneManagerSettings = _ToMenuTransition; ToMenuTransitionComplete(container); }, this.GetToMenuScenes().ToArray());
    }
    
    public override void Initialize() {
        base.Initialize();
        LevelRoot.ToMenu.Subscribe(_=> ToMenu()).DisposeWith(this.gameObject);
    }
}

[System.SerializableAttribute()]
public sealed partial class MenuSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class MenuSceneManagerBase : SceneManager {
    
    public LevelSceneManagerSettings _StartLevelTransition = new LevelSceneManagerSettings();
    
    private MenuRootViewModel _MenuRoot;
    
    private MenuRootController _MenuRootController;
    
    public MenuSceneManagerSettings _MenuSceneManagerSettings = new MenuSceneManagerSettings();
    
    [Inject("MenuRoot")]
    public virtual MenuRootViewModel MenuRoot {
        get {
            if ((this._MenuRoot == null)) {
                this._MenuRoot = CreateInstanceViewModel<MenuRootViewModel>(MenuRootController, "MenuRoot");
            }
            return this._MenuRoot;
        }
        set {
            _MenuRoot = value;
        }
    }
    
    [Inject()]
    public virtual MenuRootController MenuRootController {
        get {
            if ((this._MenuRootController == null)) {
                this._MenuRootController = new MenuRootController() { Container = Container };
            }
            return this._MenuRootController;
        }
        set {
            _MenuRootController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<MenuRootViewModel>(MenuRoot,"MenuRoot");
        Container.RegisterController<MenuRootController>(MenuRootController);
        this.Container.InjectAll();
        MenuRootController.Initialize(MenuRoot);
    }
    
    public virtual void StartLevelTransitionComplete(LevelSceneManager sceneManager) {
    }
    
    public virtual System.Collections.Generic.IEnumerable<string> GetStartLevelScenes(String arg) {
        return this._StartLevelTransition._Scenes;
    }
    
    public virtual void StartLevel(String arg) {
        GameManager.TransitionLevel<LevelSceneManager>((container) =>{container._LevelSceneManagerSettings = _StartLevelTransition; StartLevelTransitionComplete(container); }, this.GetStartLevelScenes(arg).ToArray());
    }
    
    public override void Initialize() {
        base.Initialize();
        MenuRoot.StartLevel.Subscribe(_=> StartLevel((String)MenuRoot.StartLevel.Parameter)).DisposeWith(this.gameObject);
    }
}
