// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("GraviPath")]
public abstract class MenuRootViewBase : ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return "MenuRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MenuRootViewModel);
        }
    }
    
    public MenuRootViewModel MenuRoot {
        get {
            return ((MenuRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MenuRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
    
    public virtual void ExecuteStartLevel(StartLevelDescriptor arg) {
        this.ExecuteCommand(MenuRoot.StartLevel, arg);
    }
    
    public virtual void ExecuteStartEditor() {
        this.ExecuteCommand(MenuRoot.StartEditor);
    }
    
    public virtual void ExecuteUpdateUniversesList(UniverseListUpdateDescriptor arg) {
        this.ExecuteCommand(MenuRoot.UpdateUniversesList, arg);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class LevelRootViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Player;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentTryEntry;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _BonusScore;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Universe;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RecordAttempts;
    
    public override string DefaultIdentifier {
        get {
            return "LevelRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(LevelRootViewModel);
        }
    }
    
    public LevelRootViewModel LevelRoot {
        get {
            return ((LevelRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        LevelRootViewModel levelRoot = ((LevelRootViewModel)(viewModel));
        levelRoot.Player = this._Player == null ? null : this._Player.ViewModelObject as PlayerViewModel;
        levelRoot.CurrentTryEntry = this._CurrentTryEntry == null ? null : this._CurrentTryEntry.ViewModelObject as TryEntryViewModel;
        levelRoot.BonusScore = this._BonusScore;
        levelRoot.Universe = this._Universe == null ? null : this._Universe.ViewModelObject as UniverseViewModel;
        levelRoot.RecordAttempts = this._RecordAttempts;
    }
    
    public virtual void ExecuteToMenu() {
        this.ExecuteCommand(LevelRoot.ToMenu);
    }
    
    public virtual void ExecuteRestart(Boolean arg) {
        this.ExecuteCommand(LevelRoot.Restart, arg);
    }
    
    public virtual void ExecuteLoadUniverse(UniverseViewModel universe) {
        this.ExecuteCommand(LevelRoot.LoadUniverse, universe);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PlayerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _Direction;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Acceleration;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsControllable;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PlayerViewModel player = ((PlayerViewModel)(viewModel));
        player.Direction = this._Direction;
        player.Acceleration = this._Acceleration;
        player.IsControllable = this._IsControllable;
    }
    
    public virtual void ExecuteAccelerate() {
        this.ExecuteCommand(Player.Accelerate);
    }
    
    public virtual void ExecuteSetAcceleration(Single arg) {
        this.ExecuteCommand(Player.SetAcceleration, arg);
    }
    
    public virtual void ExecuteSetDirection(Vector3 arg) {
        this.ExecuteCommand(Player.SetDirection, arg);
    }
    
    public virtual void ExecuteReset() {
        this.ExecuteCommand(Player.Reset);
    }
    
    public virtual void ExecuteCrash() {
        this.ExecuteCommand(Player.Crash);
    }
    
    public virtual void ExecuteZoneReached(ZoneViewModel zone) {
        this.ExecuteCommand(Player.ZoneReached, zone);
    }
    
    public virtual void ExecuteDock(DockDescriptor arg) {
        this.ExecuteCommand(Player.Dock, arg);
    }
    
    public virtual void ExecuteItemPickedUp(PickupableViewModel pickupable) {
        this.ExecuteCommand(Player.ItemPickedUp, pickupable);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class TryEntryViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Number;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Target;
    
    public override System.Type ViewModelType {
        get {
            return typeof(TryEntryViewModel);
        }
    }
    
    public TryEntryViewModel TryEntry {
        get {
            return ((TryEntryViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TryEntryController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TryEntryViewModel tryEntry = ((TryEntryViewModel)(viewModel));
        tryEntry.Number = this._Number;
        tryEntry.Target = this._Target == null ? null : this._Target.ViewModelObject as PlayerViewModel;
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class EditorRootViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentUniverse;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _NewUniverseData;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsUniverseDirty;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _AddUniverseObjectSubEditor;
    
    public override string DefaultIdentifier {
        get {
            return "EditorRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(EditorRootViewModel);
        }
    }
    
    public EditorRootViewModel EditorRoot {
        get {
            return ((EditorRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<EditorRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        EditorRootViewModel editorRoot = ((EditorRootViewModel)(viewModel));
        editorRoot.CurrentUniverse = this._CurrentUniverse == null ? null : this._CurrentUniverse.ViewModelObject as UniverseViewModel;
        editorRoot.NewUniverseData = this._NewUniverseData == null ? null : this._NewUniverseData.ViewModelObject as NewUniverseSubEditorViewModel;
        editorRoot.IsUniverseDirty = this._IsUniverseDirty;
        editorRoot.AddUniverseObjectSubEditor = this._AddUniverseObjectSubEditor == null ? null : this._AddUniverseObjectSubEditor.ViewModelObject as AddUniverseObjectSubEditorViewModel;
    }
    
    public virtual void ExecuteToMenu() {
        this.ExecuteCommand(EditorRoot.ToMenu);
    }
    
    public virtual void ExecuteLoadUniverse(UniverseViewModel universe) {
        this.ExecuteCommand(EditorRoot.LoadUniverse, universe);
    }
    
    public virtual void ExecuteCreateNewUniverse() {
        this.ExecuteCommand(EditorRoot.CreateNewUniverse);
    }
    
    public virtual void ExecuteToggleNewUniverseSubEditor() {
        this.ExecuteCommand(EditorRoot.ToggleNewUniverseSubEditor);
    }
    
    public virtual void ExecuteSaveCurrentUniverse() {
        this.ExecuteCommand(EditorRoot.SaveCurrentUniverse);
    }
    
    public virtual void ExecuteAddUniverseObject(UniverseObjectDescriptor arg) {
        this.ExecuteCommand(EditorRoot.AddUniverseObject, arg);
    }
    
    public virtual void ExecuteSwitchUniverseObjectSubEditor(Boolean arg) {
        this.ExecuteCommand(EditorRoot.SwitchUniverseObjectSubEditor, arg);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class UniverseViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Author;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsEditable;
    
    public override System.Type ViewModelType {
        get {
            return typeof(UniverseViewModel);
        }
    }
    
    public UniverseViewModel Universe {
        get {
            return ((UniverseViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        UniverseViewModel universe = ((UniverseViewModel)(viewModel));
        universe.Name = this._Name;
        universe.Author = this._Author;
        universe.IsEditable = this._IsEditable;
    }
    
    public virtual void ExecuteReset() {
        this.ExecuteCommand(Universe.Reset);
    }
    
    public virtual void ExecuteSave() {
        this.ExecuteCommand(Universe.Save);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class UniverseObjectViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _StartPosition;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _StartRotation;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _StartScale;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsEditable;
    
    public override System.Type ViewModelType {
        get {
            return typeof(UniverseObjectViewModel);
        }
    }
    
    public UniverseObjectViewModel UniverseObject {
        get {
            return ((UniverseObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseObjectController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        UniverseObjectViewModel universeObject = ((UniverseObjectViewModel)(viewModel));
        universeObject.StartPosition = this._StartPosition;
        universeObject.StartRotation = this._StartRotation;
        universeObject.StartScale = this._StartScale;
        universeObject.IsEditable = this._IsEditable;
    }
    
    public virtual void ExecuteReset() {
        this.ExecuteCommand(UniverseObject.Reset);
    }
    
    public virtual void ExecuteSave() {
        this.ExecuteCommand(UniverseObject.Save);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class ZoneViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ZoneViewModel);
        }
    }
    
    public ZoneViewModel Zone {
        get {
            return ((ZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ZoneController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class GravityObjectViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(GravityObjectViewModel);
        }
    }
    
    public GravityObjectViewModel GravityObject {
        get {
            return ((GravityObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GravityObjectController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PlanetViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlanetViewModel);
        }
    }
    
    public PlanetViewModel Planet {
        get {
            return ((PlanetViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlanetController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class AsteroidViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(AsteroidViewModel);
        }
    }
    
    public AsteroidViewModel Asteroid {
        get {
            return ((AsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class BlackholeViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BlackholeViewModel);
        }
    }
    
    public BlackholeViewModel Blackhole {
        get {
            return ((BlackholeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BlackholeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class MiniObjectViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(MiniObjectViewModel);
        }
    }
    
    public MiniObjectViewModel MiniObject {
        get {
            return ((MiniObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MiniObjectController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimplePlanet1ViewBase : PlanetViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimplePlanet1ViewModel);
        }
    }
    
    public SimplePlanet1ViewModel SimplePlanet1 {
        get {
            return ((SimplePlanet1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimplePlanet1Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimplePlanet2ViewBase : PlanetViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimplePlanet2ViewModel);
        }
    }
    
    public SimplePlanet2ViewModel SimplePlanet2 {
        get {
            return ((SimplePlanet2ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimplePlanet2Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimpleAsteroid1ViewBase : AsteroidViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid1ViewModel);
        }
    }
    
    public SimpleAsteroid1ViewModel SimpleAsteroid1 {
        get {
            return ((SimpleAsteroid1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid1Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimpleAsteroid2ViewBase : AsteroidViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid2ViewModel);
        }
    }
    
    public SimpleAsteroid2ViewModel SimpleAsteroid2 {
        get {
            return ((SimpleAsteroid2ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid2Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimpleAsteroid3ViewBase : AsteroidViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid3ViewModel);
        }
    }
    
    public SimpleAsteroid3ViewModel SimpleAsteroid3 {
        get {
            return ((SimpleAsteroid3ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid3Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimpleAsteroid4ViewBase : AsteroidViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid4ViewModel);
        }
    }
    
    public SimpleAsteroid4ViewModel SimpleAsteroid4 {
        get {
            return ((SimpleAsteroid4ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid4Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SimpleBlackhole1ViewBase : BlackholeViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleBlackhole1ViewModel);
        }
    }
    
    public SimpleBlackhole1ViewModel SimpleBlackhole1 {
        get {
            return ((SimpleBlackhole1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleBlackhole1Controller>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class SpaceGarbageAreaViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(SpaceGarbageAreaViewModel);
        }
    }
    
    public SpaceGarbageAreaViewModel SpaceGarbageArea {
        get {
            return ((SpaceGarbageAreaViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SpaceGarbageAreaController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class UniverseRepositoryViewBase : ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return "UniverseRepository";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(UniverseRepositoryViewModel);
        }
    }
    
    public UniverseRepositoryViewModel UniverseRepository {
        get {
            return ((UniverseRepositoryViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseRepositoryController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class NewUniverseSubEditorViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Description;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsActive;
    
    public override System.Type ViewModelType {
        get {
            return typeof(NewUniverseSubEditorViewModel);
        }
    }
    
    public NewUniverseSubEditorViewModel NewUniverseSubEditor {
        get {
            return ((NewUniverseSubEditorViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<NewUniverseSubEditorController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        NewUniverseSubEditorViewModel newUniverseSubEditor = ((NewUniverseSubEditorViewModel)(viewModel));
        newUniverseSubEditor.Name = this._Name;
        newUniverseSubEditor.Description = this._Description;
        newUniverseSubEditor.IsActive = this._IsActive;
    }
    
    public virtual void ExecuteCreateUniverse() {
        this.ExecuteCommand(NewUniverseSubEditor.CreateUniverse);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class AddUniverseObjectSubEditorViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsActive;
    
    public override System.Type ViewModelType {
        get {
            return typeof(AddUniverseObjectSubEditorViewModel);
        }
    }
    
    public AddUniverseObjectSubEditorViewModel AddUniverseObjectSubEditor {
        get {
            return ((AddUniverseObjectSubEditorViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AddUniverseObjectSubEditorController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        AddUniverseObjectSubEditorViewModel addUniverseObjectSubEditor = ((AddUniverseObjectSubEditorViewModel)(viewModel));
        addUniverseObjectSubEditor.IsActive = this._IsActive;
    }
    
    public virtual void ExecuteAdd(UniverseObjectDescriptor arg) {
        this.ExecuteCommand(AddUniverseObjectSubEditor.Add, arg);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class StartZoneViewBase : ZoneViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(StartZoneViewModel);
        }
    }
    
    public StartZoneViewModel StartZone {
        get {
            return ((StartZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<StartZoneController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class WinZoneViewBase : ZoneViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(WinZoneViewModel);
        }
    }
    
    public WinZoneViewModel WinZone {
        get {
            return ((WinZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WinZoneController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PickupableViewBase : UniverseObjectViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsActive;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PickupableViewModel);
        }
    }
    
    public PickupableViewModel Pickupable {
        get {
            return ((PickupableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PickupableController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        PickupableViewModel pickupable = ((PickupableViewModel)(viewModel));
        pickupable.IsActive = this._IsActive;
    }
    
    public virtual void ExecutePickUp() {
        this.ExecuteCommand(Pickupable.PickUp);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class ScorePointViewBase : PickupableViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ScorePointViewModel);
        }
    }
    
    public ScorePointViewModel ScorePoint {
        get {
            return ((ScorePointViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ScorePointController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PowerUpPickupableViewBase : PickupableViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(PowerUpPickupableViewModel);
        }
    }
    
    public PowerUpPickupableViewModel PowerUpPickupable {
        get {
            return ((PowerUpPickupableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PowerUpPickupableController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class AcceleratorPowerUpViewBase : PowerUpPickupableViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(AcceleratorPowerUpViewModel);
        }
    }
    
    public AcceleratorPowerUpViewModel AcceleratorPowerUp {
        get {
            return ((AcceleratorPowerUpViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AcceleratorPowerUpController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public class PlayerSpaceShipViewViewBase : PlayerViewBase {
    
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    private ShipController _ShipController;
    
    private IDisposable _PositionDisposable;
    
    [UFToggleGroup("IsControllable")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsControllableChanged")]
    public bool _BindIsControllable = true;
    
    [UFToggleGroup("Direction")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("DirectionChanged")]
    public bool _BindDirection = true;
    
    [UFToggleGroup("Accelerate")]
    [UnityEngine.HideInInspector()]
    public bool _BindAccelerate = true;
    
    [UFToggleGroup("Reset")]
    [UnityEngine.HideInInspector()]
    public bool _BindReset = true;
    
    [UFToggleGroup("ShipState")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ShipStateChanged")]
    public bool _BindShipState = true;
    
    [UFToggleGroup("Dock")]
    [UnityEngine.HideInInspector()]
    public bool _BindDock = true;
    
    public virtual ShipController ShipController {
        get {
            return _ShipController ?? (_ShipController = this.gameObject.EnsureComponent<ShipController>());
        }
        set {
            this._ShipController = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsControllableChanged(Boolean value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void DirectionChanged(Vector3 value) {
    }
    
    /// Invokes AccelerateExecuted when the Accelerate command is executed.
    public virtual void AccelerateExecuted() {
    }
    
    /// Invokes ResetExecuted when the Reset command is executed.
    public virtual void ResetExecuted() {
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void ShipStateChanged(Invert.StateMachine.State value) {
        if (value is Alive) {
            this.OnAlive();
        }
        if (value is Crashed) {
            this.OnCrashed();
        }
    }
    
    public virtual void OnAlive() {
    }
    
    public virtual void OnCrashed() {
    }
    
    /// Invokes DockExecuted when the Dock command is executed.
    public virtual void DockExecuted() {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(Player._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        if (this._BindIsControllable) {
            this.BindProperty(Player._IsControllableProperty, this.IsControllableChanged);
        }
        if (this._BindDirection) {
            this.BindProperty(Player._DirectionProperty, this.DirectionChanged);
        }
        if (this._BindAccelerate) {
            this.BindCommandExecuted(Player.Accelerate, AccelerateExecuted);
        }
        if (this._BindReset) {
            this.BindCommandExecuted(Player.Reset, ResetExecuted);
        }
        if (this._BindShipState) {
            this.BindProperty(Player._ShipStateProperty, this.ShipStateChanged);
        }
        if (this._BindDock) {
            this.BindCommandExecuted(Player.Dock, DockExecuted);
        }
    }
}

public partial class PlayerSpaceShipView : PlayerSpaceShipViewViewBase {
}

public class PlayerGUIViewViewBase : PlayerViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class PlayerGUIView : PlayerGUIViewViewBase {
}

public class LevelRootViewViewBase : LevelRootViewBase {
    
    [UFToggleGroup("Restart")]
    [UnityEngine.HideInInspector()]
    public bool _BindRestart = true;
    
    [UFToggleGroup("CurrentTryEntry")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentTryEntry = true;
    
    [UFToggleGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public bool _BindAttempts = true;
    
    [UFGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public bool _AttemptsSceneFirst;
    
    [UFGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _AttemptsContainer;
    
    [UFToggleGroup("Player")]
    [UnityEngine.HideInInspector()]
    public bool _BindPlayer = true;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    public bool _BindScore = true;
    
    [UFToggleGroup("Universe")]
    [UnityEngine.HideInInspector()]
    public bool _BindUniverse = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelRootController>());
    }
    
    /// Invokes RestartExecuted when the Restart command is executed.
    public virtual void RestartExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentTryEntryChanged(TryEntryViewModel value) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateAttemptsView(TryEntryViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AttemptsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AttemptsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PlayerChanged(PlayerViewModel value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void UniverseChanged(UniverseViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindRestart) {
            this.BindCommandExecuted(LevelRoot.Restart, RestartExecuted);
        }
        if (this._BindCurrentTryEntry) {
            this.BindProperty(LevelRoot._CurrentTryEntryProperty, this.CurrentTryEntryChanged);
        }
        if (this._BindAttempts) {
            this.BindToViewCollection( LevelRoot._AttemptsProperty, viewModel=>{ return CreateAttemptsView(viewModel as TryEntryViewModel); }, AttemptsAdded, AttemptsRemoved, _AttemptsContainer, _AttemptsSceneFirst);
        }
        if (this._BindPlayer) {
            this.BindProperty(LevelRoot._PlayerProperty, this.PlayerChanged);
        }
        if (this._BindScore) {
            this.BindProperty(LevelRoot._ScoreProperty, this.ScoreChanged);
        }
        if (this._BindUniverse) {
            this.BindProperty(LevelRoot._UniverseProperty, this.UniverseChanged);
        }
    }
}

public partial class LevelRootView : LevelRootViewViewBase {
}

public class TryEntryViewViewBase : TryEntryViewBase {
    
    private IDisposable _PathLengthDisposable;
    
    [UFToggleGroup("Target")]
    [UnityEngine.HideInInspector()]
    public bool _BindTarget = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TryEntryController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void TargetChanged(PlayerViewModel value) {
    }
    
    public virtual void ResetPathLength() {
        if (_PathLengthDisposable != null) _PathLengthDisposable.Dispose();
        _PathLengthDisposable = GetPathLengthObservable().Subscribe(TryEntry._PathLengthProperty).DisposeWith(this);
    }
    
    protected virtual Single CalculatePathLength() {
        return default(Single);
    }
    
    protected virtual UniRx.IObservable<Single> GetPathLengthObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePathLength());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPathLength();
        if (this._BindTarget) {
            this.BindProperty(TryEntry._TargetProperty, this.TargetChanged);
        }
    }
}

public partial class TryEntryView : TryEntryViewViewBase {
}

public class MenuRootViewViewBase : MenuRootViewBase {
    
    [UFToggleGroup("UniversesList")]
    [UnityEngine.HideInInspector()]
    public bool _BindUniversesList = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MenuRootController>());
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void UniversesListAdded(UniverseViewModel item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void UniversesListRemoved(UniverseViewModel item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindUniversesList) {
            this.BindCollection(MenuRoot._UniversesListProperty, UniversesListAdded, UniversesListRemoved);
        }
    }
}

public partial class MenuRootView : MenuRootViewViewBase {
}

public class EditorRootViewViewBase : EditorRootViewBase {
    
    [UFToggleGroup("CurrentUniverse")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentUniverse = true;
    
    [UFToggleGroup("AvailableUniverses")]
    [UnityEngine.HideInInspector()]
    public bool _BindAvailableUniverses = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<EditorRootController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentUniverseChanged(UniverseViewModel value) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void AvailableUniversesAdded(UniverseViewModel item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void AvailableUniversesRemoved(UniverseViewModel item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindCurrentUniverse) {
            this.BindProperty(EditorRoot._CurrentUniverseProperty, this.CurrentUniverseChanged);
        }
        if (this._BindAvailableUniverses) {
            this.BindCollection(EditorRoot._AvailableUniversesProperty, AvailableUniversesAdded, AvailableUniversesRemoved);
        }
    }
}

public partial class EditorRootView : EditorRootViewViewBase {
}

public class UniverseObjectViewViewBase : UniverseObjectViewBase {
    
    private IDisposable _PositionDisposable;
    
    private IDisposable _RotationDisposable;
    
    private IDisposable _ScaleDisposable;
    
    [UFToggleGroup("Reset")]
    [UnityEngine.HideInInspector()]
    public bool _BindReset = true;
    
    [UFToggleGroup("IsEditable")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsEditableChanged")]
    public bool _BindIsEditable = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseObjectController>());
    }
    
    /// Invokes ResetExecuted when the Reset command is executed.
    public virtual void ResetExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsEditableChanged(Boolean value) {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(UniverseObject._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public virtual void ResetRotation() {
        if (_RotationDisposable != null) _RotationDisposable.Dispose();
        _RotationDisposable = GetRotationObservable().Subscribe(UniverseObject._RotationProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculateRotation() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetRotationObservable() {
        return this.UpdateAsObservable().Select(p => CalculateRotation());
    }
    
    public virtual void ResetScale() {
        if (_ScaleDisposable != null) _ScaleDisposable.Dispose();
        _ScaleDisposable = GetScaleObservable().Subscribe(UniverseObject._ScaleProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculateScale() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetScaleObservable() {
        return this.UpdateAsObservable().Select(p => CalculateScale());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        ResetRotation();
        ResetScale();
        if (this._BindReset) {
            this.BindCommandExecuted(UniverseObject.Reset, ResetExecuted);
        }
        if (this._BindIsEditable) {
            this.BindProperty(UniverseObject._IsEditableProperty, this.IsEditableChanged);
        }
    }
}

public partial class UniverseObjectView : UniverseObjectViewViewBase {
}

public class ZoneViewViewBase : UniverseObjectView {
    
    public ZoneViewModel Zone {
        get {
            return ((ZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(ZoneViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ZoneController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class ZoneView : ZoneViewViewBase {
}

public class GravityObjectViewViewBase : UniverseObjectView {
    
    public GravityObjectViewModel GravityObject {
        get {
            return ((GravityObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GravityObjectViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GravityObjectController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public abstract partial class GravityObjectView : GravityObjectViewViewBase {
}

public class UniverseViewViewBase : UniverseViewBase {
    
    [UFToggleGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public bool _BindObjects = true;
    
    [UFGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public bool _ObjectsSceneFirst;
    
    [UFGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _ObjectsContainer;
    
    [UFToggleGroup("IsEditable")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsEditableChanged")]
    public bool _BindIsEditable = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateObjectsView(UniverseObjectViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ObjectsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ObjectsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsEditableChanged(Boolean value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindObjects) {
            this.BindToViewCollection( Universe._ObjectsProperty, viewModel=>{ return CreateObjectsView(viewModel as UniverseObjectViewModel); }, ObjectsAdded, ObjectsRemoved, _ObjectsContainer, _ObjectsSceneFirst);
        }
        if (this._BindIsEditable) {
            this.BindProperty(Universe._IsEditableProperty, this.IsEditableChanged);
        }
    }
}

public partial class UniverseView : UniverseViewViewBase {
}

public class PlanetViewViewBase : GravityObjectView {
    
    public PlanetViewModel Planet {
        get {
            return ((PlanetViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlanetViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlanetController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public abstract partial class PlanetView : PlanetViewViewBase {
}

public class AsteroidViewViewBase : GravityObjectView {
    
    public AsteroidViewModel Asteroid {
        get {
            return ((AsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(AsteroidViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public abstract partial class AsteroidView : AsteroidViewViewBase {
}

public class BlackholeViewViewBase : GravityObjectView {
    
    public BlackholeViewModel Blackhole {
        get {
            return ((BlackholeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(BlackholeViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BlackholeController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public abstract partial class BlackholeView : BlackholeViewViewBase {
}

public class MiniObjectViewViewBase : UniverseObjectView {
    
    public MiniObjectViewModel MiniObject {
        get {
            return ((MiniObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MiniObjectViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MiniObjectController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class MiniObjectView : MiniObjectViewViewBase {
}

public class SimplePlanet1ViewViewBase : PlanetView {
    
    public SimplePlanet1ViewModel SimplePlanet1 {
        get {
            return ((SimplePlanet1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimplePlanet1ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimplePlanet1Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimplePlanet1View : SimplePlanet1ViewViewBase {
}

public class SimplePlanet2ViewViewBase : PlanetView {
    
    public SimplePlanet2ViewModel SimplePlanet2 {
        get {
            return ((SimplePlanet2ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimplePlanet2ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimplePlanet2Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimplePlanet2View : SimplePlanet2ViewViewBase {
}

public class SimpleAsteroid1ViewViewBase : AsteroidView {
    
    public SimpleAsteroid1ViewModel SimpleAsteroid1 {
        get {
            return ((SimpleAsteroid1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid1ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid1Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimpleAsteroid1View : SimpleAsteroid1ViewViewBase {
}

public class SimpleAsteroid2ViewViewBase : AsteroidView {
    
    public SimpleAsteroid2ViewModel SimpleAsteroid2 {
        get {
            return ((SimpleAsteroid2ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid2ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid2Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimpleAsteroid2View : SimpleAsteroid2ViewViewBase {
}

public class SimpleAsteroid3ViewViewBase : AsteroidView {
    
    public SimpleAsteroid3ViewModel SimpleAsteroid3 {
        get {
            return ((SimpleAsteroid3ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid3ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid3Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimpleAsteroid3View : SimpleAsteroid3ViewViewBase {
}

public class SimpleAsteroid4ViewViewBase : AsteroidView {
    
    public SimpleAsteroid4ViewModel SimpleAsteroid4 {
        get {
            return ((SimpleAsteroid4ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleAsteroid4ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleAsteroid4Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimpleAsteroid4View : SimpleAsteroid4ViewViewBase {
}

public class SimpleBlackhole1ViewViewBase : BlackholeView {
    
    public SimpleBlackhole1ViewModel SimpleBlackhole1 {
        get {
            return ((SimpleBlackhole1ViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(SimpleBlackhole1ViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SimpleBlackhole1Controller>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class SimpleBlackhole1View : SimpleBlackhole1ViewViewBase {
}

public class UniverseEditorNewUniverseWindowViewBase : NewUniverseSubEditorViewBase {
    
    [UFToggleGroup("Name")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("NameChanged")]
    public bool _BindName = true;
    
    [UFToggleGroup("Description")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("DescriptionChanged")]
    public bool _BindDescription = true;
    
    [UFToggleGroup("IsValid")]
    [UnityEngine.HideInInspector()]
    public bool _BindIsValid = true;
    
    [UFToggleGroup("CreateUniverse")]
    [UnityEngine.HideInInspector()]
    public bool _BindCreateUniverse = true;
    
    [UFToggleGroup("IsActive")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsActiveChanged")]
    public bool _BindIsActive = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<NewUniverseSubEditorController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void NameChanged(String value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void DescriptionChanged(String value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsValidChanged(Boolean value) {
    }
    
    /// Invokes CreateUniverseExecuted when the CreateUniverse command is executed.
    public virtual void CreateUniverseExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsActiveChanged(Boolean value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindName) {
            this.BindProperty(NewUniverseSubEditor._NameProperty, this.NameChanged);
        }
        if (this._BindDescription) {
            this.BindProperty(NewUniverseSubEditor._DescriptionProperty, this.DescriptionChanged);
        }
        if (this._BindIsValid) {
            this.BindProperty(NewUniverseSubEditor._IsValidProperty, this.IsValidChanged);
        }
        if (this._BindCreateUniverse) {
            this.BindCommandExecuted(NewUniverseSubEditor.CreateUniverse, CreateUniverseExecuted);
        }
        if (this._BindIsActive) {
            this.BindProperty(NewUniverseSubEditor._IsActiveProperty, this.IsActiveChanged);
        }
    }
}

public partial class UniverseEditorNewUniverseWindow : UniverseEditorNewUniverseWindowViewBase {
}

public class AddUniverseObjectSubEditorViewViewBase : AddUniverseObjectSubEditorViewBase {
    
    [UFToggleGroup("IsActive")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsActiveChanged")]
    public bool _BindIsActive = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AddUniverseObjectSubEditorController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsActiveChanged(Boolean value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindIsActive) {
            this.BindProperty(AddUniverseObjectSubEditor._IsActiveProperty, this.IsActiveChanged);
        }
    }
}

public partial class AddUniverseObjectSubEditorView : AddUniverseObjectSubEditorViewViewBase {
}

public class StartZoneViewViewBase : UniverseObjectView {
    
    public StartZoneViewModel StartZone {
        get {
            return ((StartZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(StartZoneViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<StartZoneController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class StartZoneView : StartZoneViewViewBase {
}

public class WinZoneViewViewBase : ZoneView {
    
    public WinZoneViewModel WinZone {
        get {
            return ((WinZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(WinZoneViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WinZoneController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class WinZoneView : WinZoneViewViewBase {
}

public class LevelRootGUIViewViewBase : LevelRootViewBase {
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    public bool _BindScore = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelRootController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindScore) {
            this.BindProperty(LevelRoot._ScoreProperty, this.ScoreChanged);
        }
    }
}

public partial class LevelRootGUIView : LevelRootGUIViewViewBase {
}

public class PickupableViewViewBase : UniverseObjectView {
    
    [UFToggleGroup("IsActive")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsActiveChanged")]
    public bool _BindIsActive = true;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsActive;
    
    public PickupableViewModel Pickupable {
        get {
            return ((PickupableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PickupableViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PickupableController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsActiveChanged(Boolean value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindIsActive) {
            this.BindProperty(Pickupable._IsActiveProperty, this.IsActiveChanged);
        }
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        PickupableViewModel pickupable = ((PickupableViewModel)(viewModel));
        pickupable.IsActive = this._IsActive;
    }
    
    public virtual void ExecutePickUp() {
        this.ExecuteCommand(Pickupable.PickUp);
    }
}

public abstract partial class PickupableView : PickupableViewViewBase {
}

public class PowerUpPickupableViewViewBase : PickupableView {
    
    public PowerUpPickupableViewModel PowerUpPickupable {
        get {
            return ((PowerUpPickupableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PowerUpPickupableViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PowerUpPickupableController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class PowerUpPickupableView : PowerUpPickupableViewViewBase {
}

public class ScorePointViewViewBase : PickupableView {
    
    public ScorePointViewModel ScorePoint {
        get {
            return ((ScorePointViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(ScorePointViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ScorePointController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class ScorePointView : ScorePointViewViewBase {
}

public partial class ShipController : ViewComponent {
    
    public virtual PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteAccelerate() {
        this.View.ExecuteCommand(Player.Accelerate);
    }
    
    public virtual void ExecuteSetAcceleration(Single arg) {
        this.View.ExecuteCommand(Player.SetAcceleration, arg);
    }
    
    public virtual void ExecuteSetDirection(Vector3 arg) {
        this.View.ExecuteCommand(Player.SetDirection, arg);
    }
    
    public virtual void ExecuteReset() {
        this.View.ExecuteCommand(Player.Reset);
    }
    
    public virtual void ExecuteCrash() {
        this.View.ExecuteCommand(Player.Crash);
    }
    
    public virtual void ExecuteZoneReached(ZoneViewModel zone) {
        this.View.ExecuteCommand(Player.ZoneReached, zone);
    }
    
    public virtual void ExecuteDock(DockDescriptor arg) {
        this.View.ExecuteCommand(Player.Dock, arg);
    }
    
    public virtual void ExecuteItemPickedUp(PickupableViewModel pickupable) {
        this.View.ExecuteCommand(Player.ItemPickedUp, pickupable);
    }
}

public partial class InputShipController : ShipController {
}

public partial class AnotherShipController : ShipController {
}
