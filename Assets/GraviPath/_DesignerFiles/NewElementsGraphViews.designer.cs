// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("GraviPath")]
public abstract class MenuRootViewBase : ViewBase {
    
    public override string DefaultIdentifier {
        get {
            return "MenuRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MenuRootViewModel);
        }
    }
    
    public MenuRootViewModel MenuRoot {
        get {
            return ((MenuRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MenuRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
    
    public virtual void ExecuteStartLevel(String arg) {
        this.ExecuteCommand(MenuRoot.StartLevel, arg);
    }
    
    public virtual void ExecuteStartEditor() {
        this.ExecuteCommand(MenuRoot.StartEditor);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class LevelRootViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Player;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentTryEntry;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _BonusScore;
    
    public override string DefaultIdentifier {
        get {
            return "LevelRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(LevelRootViewModel);
        }
    }
    
    public LevelRootViewModel LevelRoot {
        get {
            return ((LevelRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        LevelRootViewModel levelRoot = ((LevelRootViewModel)(viewModel));
        levelRoot.Player = this._Player == null ? null : this._Player.ViewModelObject as PlayerViewModel;
        levelRoot.CurrentTryEntry = this._CurrentTryEntry == null ? null : this._CurrentTryEntry.ViewModelObject as TryEntryViewModel;
        levelRoot.BonusScore = this._BonusScore;
    }
    
    public virtual void ExecuteToMenu() {
        this.ExecuteCommand(LevelRoot.ToMenu);
    }
    
    public virtual void ExecuteRestart(Boolean arg) {
        this.ExecuteCommand(LevelRoot.Restart, arg);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PlayerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _Direction;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Acceleration;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsControllable;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PlayerViewModel player = ((PlayerViewModel)(viewModel));
        player.Direction = this._Direction;
        player.Acceleration = this._Acceleration;
        player.IsControllable = this._IsControllable;
    }
    
    public virtual void ExecuteAccelerate() {
        this.ExecuteCommand(Player.Accelerate);
    }
    
    public virtual void ExecuteSetAcceleration(Single arg) {
        this.ExecuteCommand(Player.SetAcceleration, arg);
    }
    
    public virtual void ExecuteSetDirection(Vector3 arg) {
        this.ExecuteCommand(Player.SetDirection, arg);
    }
    
    public virtual void ExecuteReset() {
        this.ExecuteCommand(Player.Reset);
    }
    
    public virtual void ExecuteCrash() {
        this.ExecuteCommand(Player.Crash);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class TryEntryViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Number;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Target;
    
    public override System.Type ViewModelType {
        get {
            return typeof(TryEntryViewModel);
        }
    }
    
    public TryEntryViewModel TryEntry {
        get {
            return ((TryEntryViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TryEntryController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TryEntryViewModel tryEntry = ((TryEntryViewModel)(viewModel));
        tryEntry.Number = this._Number;
        tryEntry.Target = this._Target == null ? null : this._Target.ViewModelObject as PlayerViewModel;
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class EditorRootViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentUniverse;
    
    public override string DefaultIdentifier {
        get {
            return "EditorRoot";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(EditorRootViewModel);
        }
    }
    
    public EditorRootViewModel EditorRoot {
        get {
            return ((EditorRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<EditorRootController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        EditorRootViewModel editorRoot = ((EditorRootViewModel)(viewModel));
        editorRoot.CurrentUniverse = this._CurrentUniverse == null ? null : this._CurrentUniverse.ViewModelObject as UniverseViewModel;
    }
    
    public virtual void ExecuteToMenu() {
        this.ExecuteCommand(EditorRoot.ToMenu);
    }
    
    public virtual void ExecuteSerialize() {
        this.ExecuteCommand(EditorRoot.Serialize);
    }
    
    public virtual void ExecuteLoadUniverse() {
        this.ExecuteCommand(EditorRoot.LoadUniverse);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class UniverseViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(UniverseViewModel);
        }
    }
    
    public UniverseViewModel Universe {
        get {
            return ((UniverseViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class UniverseObjectViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(UniverseObjectViewModel);
        }
    }
    
    public UniverseObjectViewModel UniverseObject {
        get {
            return ((UniverseObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseObjectController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        UniverseObjectViewModel universeObject = ((UniverseObjectViewModel)(viewModel));
    }
    
    public virtual void ExecuteReset() {
        this.ExecuteCommand(UniverseObject.Reset);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class ZoneViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ZoneViewModel);
        }
    }
    
    public ZoneViewModel Zone {
        get {
            return ((ZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ZoneController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class GravityObjectViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(GravityObjectViewModel);
        }
    }
    
    public GravityObjectViewModel GravityObject {
        get {
            return ((GravityObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GravityObjectController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class PlanetViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlanetViewModel);
        }
    }
    
    public PlanetViewModel Planet {
        get {
            return ((PlanetViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlanetController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class AsteroidViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(AsteroidViewModel);
        }
    }
    
    public AsteroidViewModel Asteroid {
        get {
            return ((AsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class BlackholeViewBase : GravityObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BlackholeViewModel);
        }
    }
    
    public BlackholeViewModel Blackhole {
        get {
            return ((BlackholeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BlackholeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("GraviPath")]
public abstract class MiniAsteroidViewBase : UniverseObjectViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(MiniAsteroidViewModel);
        }
    }
    
    public MiniAsteroidViewModel MiniAsteroid {
        get {
            return ((MiniAsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MiniAsteroidController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public class PlayerSpaceShipViewViewBase : PlayerViewBase {
    
    [UnityEngine.SerializeField()]
    [UnityEngine.HideInInspector()]
    private ShipController _ShipController;
    
    private IDisposable _PositionDisposable;
    
    [UFToggleGroup("IsControllable")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("IsControllableChanged")]
    public bool _BindIsControllable = true;
    
    [UFToggleGroup("Direction")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("DirectionChanged")]
    public bool _BindDirection = true;
    
    [UFToggleGroup("Accelerate")]
    [UnityEngine.HideInInspector()]
    public bool _BindAccelerate = true;
    
    [UFToggleGroup("Reset")]
    [UnityEngine.HideInInspector()]
    public bool _BindReset = true;
    
    [UFToggleGroup("ShipState")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ShipStateChanged")]
    public bool _BindShipState = true;
    
    public virtual ShipController ShipController {
        get {
            return _ShipController ?? (_ShipController = this.gameObject.EnsureComponent<ShipController>());
        }
        set {
            this._ShipController = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void IsControllableChanged(Boolean value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void DirectionChanged(Vector3 value) {
    }
    
    /// Invokes AccelerateExecuted when the Accelerate command is executed.
    public virtual void AccelerateExecuted() {
    }
    
    /// Invokes ResetExecuted when the Reset command is executed.
    public virtual void ResetExecuted() {
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void ShipStateChanged(Invert.StateMachine.State value) {
        if (value is Alive) {
            this.OnAlive();
        }
        if (value is Crashed) {
            this.OnCrashed();
        }
    }
    
    public virtual void OnAlive() {
    }
    
    public virtual void OnCrashed() {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(Player._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        if (this._BindIsControllable) {
            this.BindProperty(Player._IsControllableProperty, this.IsControllableChanged);
        }
        if (this._BindDirection) {
            this.BindProperty(Player._DirectionProperty, this.DirectionChanged);
        }
        if (this._BindAccelerate) {
            this.BindCommandExecuted(Player.Accelerate, AccelerateExecuted);
        }
        if (this._BindReset) {
            this.BindCommandExecuted(Player.Reset, ResetExecuted);
        }
        if (this._BindShipState) {
            this.BindProperty(Player._ShipStateProperty, this.ShipStateChanged);
        }
    }
}

public partial class PlayerSpaceShipView : PlayerSpaceShipViewViewBase {
}

public class PlayerGUIViewViewBase : PlayerViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class PlayerGUIView : PlayerGUIViewViewBase {
}

public class LevelRootViewViewBase : LevelRootViewBase {
    
    [UFToggleGroup("Restart")]
    [UnityEngine.HideInInspector()]
    public bool _BindRestart = true;
    
    [UFToggleGroup("CurrentTryEntry")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentTryEntry = true;
    
    [UFToggleGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public bool _BindAttempts = true;
    
    [UFGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public bool _AttemptsSceneFirst;
    
    [UFGroup("Attempts")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _AttemptsContainer;
    
    [UFToggleGroup("Player")]
    [UnityEngine.HideInInspector()]
    public bool _BindPlayer = true;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    public bool _BindScore = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LevelRootController>());
    }
    
    /// Invokes RestartExecuted when the Restart command is executed.
    public virtual void RestartExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentTryEntryChanged(TryEntryViewModel value) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateAttemptsView(TryEntryViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AttemptsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void AttemptsRemoved(ViewBase item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PlayerChanged(PlayerViewModel value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void ScoreChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindRestart) {
            this.BindCommandExecuted(LevelRoot.Restart, RestartExecuted);
        }
        if (this._BindCurrentTryEntry) {
            this.BindProperty(LevelRoot._CurrentTryEntryProperty, this.CurrentTryEntryChanged);
        }
        if (this._BindAttempts) {
            this.BindToViewCollection( LevelRoot._AttemptsProperty, viewModel=>{ return CreateAttemptsView(viewModel as TryEntryViewModel); }, AttemptsAdded, AttemptsRemoved, _AttemptsContainer, _AttemptsSceneFirst);
        }
        if (this._BindPlayer) {
            this.BindProperty(LevelRoot._PlayerProperty, this.PlayerChanged);
        }
        if (this._BindScore) {
            this.BindProperty(LevelRoot._ScoreProperty, this.ScoreChanged);
        }
    }
}

public partial class LevelRootView : LevelRootViewViewBase {
}

public class TryEntryViewViewBase : TryEntryViewBase {
    
    private IDisposable _PathLengthDisposable;
    
    [UFToggleGroup("Target")]
    [UnityEngine.HideInInspector()]
    public bool _BindTarget = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TryEntryController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void TargetChanged(PlayerViewModel value) {
    }
    
    public virtual void ResetPathLength() {
        if (_PathLengthDisposable != null) _PathLengthDisposable.Dispose();
        _PathLengthDisposable = GetPathLengthObservable().Subscribe(TryEntry._PathLengthProperty).DisposeWith(this);
    }
    
    protected virtual Single CalculatePathLength() {
        return default(Single);
    }
    
    protected virtual UniRx.IObservable<Single> GetPathLengthObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePathLength());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPathLength();
        if (this._BindTarget) {
            this.BindProperty(TryEntry._TargetProperty, this.TargetChanged);
        }
    }
}

public partial class TryEntryView : TryEntryViewViewBase {
}

public class MenuRootViewViewBase : MenuRootViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MenuRootController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class MenuRootView : MenuRootViewViewBase {
}

public class EditorRootViewViewBase : EditorRootViewBase {
    
    [UFToggleGroup("Serialize")]
    [UnityEngine.HideInInspector()]
    public bool _BindSerialize = true;
    
    [UFToggleGroup("CurrentUniverse")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentUniverse = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<EditorRootController>());
    }
    
    /// Invokes SerializeExecuted when the Serialize command is executed.
    public virtual void SerializeExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void CurrentUniverseChanged(UniverseViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSerialize) {
            this.BindCommandExecuted(EditorRoot.Serialize, SerializeExecuted);
        }
        if (this._BindCurrentUniverse) {
            this.BindProperty(EditorRoot._CurrentUniverseProperty, this.CurrentUniverseChanged);
        }
    }
}

public partial class EditorRootView : EditorRootViewViewBase {
}

public class UniverseObjectViewViewBase : UniverseObjectViewBase {
    
    private IDisposable _PositionDisposable;
    
    private IDisposable _RotationDisposable;
    
    [UFToggleGroup("Reset")]
    [UnityEngine.HideInInspector()]
    public bool _BindReset = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseObjectController>());
    }
    
    /// Invokes ResetExecuted when the Reset command is executed.
    public virtual void ResetExecuted() {
    }
    
    public virtual void ResetPosition() {
        if (_PositionDisposable != null) _PositionDisposable.Dispose();
        _PositionDisposable = GetPositionObservable().Subscribe(UniverseObject._PositionProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculatePosition() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetPositionObservable() {
        return this.UpdateAsObservable().Select(p => CalculatePosition());
    }
    
    public virtual void ResetRotation() {
        if (_RotationDisposable != null) _RotationDisposable.Dispose();
        _RotationDisposable = GetRotationObservable().Subscribe(UniverseObject._RotationProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculateRotation() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetRotationObservable() {
        return this.UpdateAsObservable().Select(p => CalculateRotation());
    }
    
    public override void Bind() {
        base.Bind();
        ResetPosition();
        ResetRotation();
        if (this._BindReset) {
            this.BindCommandExecuted(UniverseObject.Reset, ResetExecuted);
        }
    }
}

public partial class UniverseObjectView : UniverseObjectViewViewBase {
}

public class ZoneViewViewBase : UniverseObjectView {
    
    public ZoneViewModel Zone {
        get {
            return ((ZoneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(ZoneViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ZoneController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class ZoneView : ZoneViewViewBase {
}

public class GravityObjectViewViewBase : UniverseObjectView {
    
    public GravityObjectViewModel GravityObject {
        get {
            return ((GravityObjectViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GravityObjectViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GravityObjectController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class GravityObjectView : GravityObjectViewViewBase {
}

public class UniverseViewViewBase : UniverseViewBase {
    
    [UFToggleGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public bool _BindObjects = true;
    
    [UFGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public bool _ObjectsSceneFirst;
    
    [UFGroup("Objects")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _ObjectsContainer;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UniverseController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateObjectsView(UniverseObjectViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ObjectsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ObjectsRemoved(ViewBase item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindObjects) {
            this.BindToViewCollection( Universe._ObjectsProperty, viewModel=>{ return CreateObjectsView(viewModel as UniverseObjectViewModel); }, ObjectsAdded, ObjectsRemoved, _ObjectsContainer, _ObjectsSceneFirst);
        }
    }
}

public partial class UniverseView : UniverseViewViewBase {
}

public class PlanetViewViewBase : GravityObjectView {
    
    public PlanetViewModel Planet {
        get {
            return ((PlanetViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlanetViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlanetController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class PlanetView : PlanetViewViewBase {
}

public class AsteroidViewViewBase : GravityObjectView {
    
    public AsteroidViewModel Asteroid {
        get {
            return ((AsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(AsteroidViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AsteroidController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class AsteroidView : AsteroidViewViewBase {
}

public class BlackholeViewViewBase : GravityObjectView {
    
    public BlackholeViewModel Blackhole {
        get {
            return ((BlackholeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(BlackholeViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BlackholeController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class BlackholeView : BlackholeViewViewBase {
}

public class MiniAsteroidViewViewBase : UniverseObjectView {
    
    public MiniAsteroidViewModel MiniAsteroid {
        get {
            return ((MiniAsteroidViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MiniAsteroidViewModel);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MiniAsteroidController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class MiniAsteroidView : MiniAsteroidViewViewBase {
}

public partial class ShipController : ViewComponent {
    
    public virtual PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteAccelerate() {
        this.View.ExecuteCommand(Player.Accelerate);
    }
    
    public virtual void ExecuteSetAcceleration(Single arg) {
        this.View.ExecuteCommand(Player.SetAcceleration, arg);
    }
    
    public virtual void ExecuteSetDirection(Vector3 arg) {
        this.View.ExecuteCommand(Player.SetDirection, arg);
    }
    
    public virtual void ExecuteReset() {
        this.View.ExecuteCommand(Player.Reset);
    }
    
    public virtual void ExecuteCrash() {
        this.View.ExecuteCommand(Player.Crash);
    }
}

public partial class InputShipController : ShipController {
}

public partial class AnotherShipController : ShipController {
}
